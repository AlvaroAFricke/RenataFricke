---
import Home from "../components/Home.astro";
import Invitacion from "../components/Invitacion.astro";
import Lugar from "../components/Lugar.astro";

import Regresiva from "../components/Regresiva.astro";
import Album from "../components/Album.astro";
import Regalos from "../components/Regalos.astro";

import Confirmacion from "../components/Confirmacion.astro";
import Canciones from "../components/Canciones.astro";

import Footer from "../components/Footer.astro";
import Codigo from "../components/Codigo.astro";
interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Te invito a festejar mis XV!" />
		<meta name="viewport" content="width=device-width" />

		<link rel="preconnect" href="https://fonts.googleapis.com" />
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
		<link
			href="https://fonts.googleapis.com/css2?family=Sevillana&display=swap"
			rel="stylesheet"
		/>

		<link rel="stylesheet" href="/" />

		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>
	<body class="w-screen h-screen">
		<!-- Contenedor principal -->
		<div id="main" class="w-screen h-screen">
			<div class="w-screen h-screen">
				<Home />
			</div>
			<div class="w-screen h-screen flex flex-col justify-around">
				<Invitacion />
				<Regresiva />
				<Lugar />
				<Album />
			</div>
			<div class="w-screen h-screen flex flex-col justify-around">
				<Codigo />
				<Regalos />
				<Canciones />
				<Confirmacion />
				<Footer />
			</div>
		</div>

		<script>
			let isScrolling = false; // Evitar múltiples disparos del evento
			const sections = Array.from(document.querySelectorAll("#main > div")); // Convertimos a array
			let currentSection = 0;
		
			const scrollToSection = (index) => {
				// Ajustar el índice para mantenerse dentro de los límites
				if (index < 0 || index >= sections.length) return;
		
				currentSection = index;
				sections[currentSection].scrollIntoView({
					behavior: "smooth",
				});
		
				// Evitar múltiples activaciones mientras se está desplazando
				isScrolling = true;
				setTimeout(() => {
					isScrolling = false;
				}, 1000); // Ajustar según la velocidad del desplazamiento
			};
		
			window.addEventListener(
				"wheel",
				(event) => {
					if (isScrolling) return;
		
					// Determinar la dirección del desplazamiento
					const direction = event.deltaY > 0 ? 1 : -1;
					scrollToSection(currentSection + direction);
				},
				{ passive: false }
			);
		
			// Agregar soporte para scroll en móviles con "touchstart" y "touchend"
			let touchStartY = 0;
		
			window.addEventListener("touchstart", (event) => {
				touchStartY = event.touches[0].clientY;
			});
		
			window.addEventListener("touchend", (event) => {
				if (isScrolling) return;
		
				const touchEndY = event.changedTouches[0].clientY;
				const direction = touchStartY - touchEndY > 0 ? 1 : -1;
				scrollToSection(currentSection + direction);
			});
		</script>
	</body>
</html>

<style is:global>
	body {
		margin: 0;
		padding: 0;
	}
</style>
